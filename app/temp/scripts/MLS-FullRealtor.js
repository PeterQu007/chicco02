/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./app/content/mls-FullRealtor.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/assets/scripts/modules/AddressInfo.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/@babel/runtime/helpers/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);\n\n\n//// ANALYSE THE CIVIC ADDRESS INFORMATION\n//// NORMALIZE THE ADDRESS IF IT IS NOT A FORMAL.BCA.ADDRESS\nvar AddressInfo = function AddressInfo(address, houseType, formal) {\n  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, AddressInfo);\n\n  address = address.replace('.', '');\n  this.isFormalAddress = formal == undefined ? false : formal;\n  this.houseType = houseType ? houseType : \"AUTO\";\n  houseType = this.houseType;\n  this.addressParts = address.split(' '); ////SPLIT THE ADDRESS TO PARTS.ARRAY\n  ////LOOK FOR UNIT NO, THEN REMOVE THE UNIT.NO FROM THE ADDRESS.PARTS.ARRAY\n\n  this.UnitNo = '';\n\n  switch (houseType.toUpperCase()) {\n    case 'TOWNHOUSE':\n    case 'APARTMENT':\n    case 'APARTMENT/CONDO':\n    case 'CONDO':\n    case 'ATTACHED':\n      houseType = 'Attached';\n      break;\n\n    case 'AUTO':\n      ////HOUSE TYPE COULD BE TOLD FROM IF THERE IS A UNIT NO OR NOT\n      if (address.indexOf('UNIT#') > -1) {\n        houseType = 'Attached';\n      } else {\n        houseType = 'Detached';\n      }\n\n      break;\n\n    default:\n      houseType = 'Detached';\n      break;\n  }\n\n  this.houseType = houseType; ////FORMAL.ADDRESS IS FROM THE BC.ASSESSMENT RESULT\n\n  if (this.isFormalAddress) {\n    if (houseType == 'Attached') {\n      if (this.addressParts.length > 3) {\n        this.UnitNo = this.addressParts.pop();\n        this.addressParts.pop();\n      } else {\n        this.UnitNo = \"TBA\";\n      }\n    }\n  } else {\n    if (houseType == 'Attached') {\n      if (this.addressParts.length > 3) {\n        this.UnitNo = this.addressParts.shift();\n      } else {\n        this.UnitNo = \"TBA\";\n      }\n    }\n  }\n\n  this.streetNumber = this.addressParts.shift();\n  this.streetType = this.addressParts.pop(); ////STREET, AVENUE, BOULEVARD, HIGHWAY...\n\n  this.streetName = this.addressParts.toString().replace(',', '-');\n  var streetType = this.streetType.trim().toString().toUpperCase(); ////STANDARDIZE THE STREET.TYPE TO ABBREVIATIONS: ST, AV, BV, HW, CR, ...\n\n  switch (streetType) {\n    case 'AVENUE':\n      streetType = 'AV';\n      break;\n\n    case 'STREET':\n      streetType = 'ST';\n      break;\n\n    case 'DRIVE':\n      streetType = 'DR';\n      break;\n\n    case 'BOULEVARD':\n      streetType = 'BV';\n      break;\n\n    case 'BYPASS':\n      streetType = 'BP';\n      break;\n\n    case 'CRESCENT':\n      streetType = \"CR\";\n      break;\n\n    default:\n      streetType = streetType;\n      break;\n  }\n\n  this.streetType = streetType; ////GET FORMAL.BCA.ADDRESS\n\n  this.formalAddress = this.streetNumber + \" \" + this.streetName.replace('-', ' ') + \" \" + this.streetType;\n\n  if (this.UnitNo) {\n    this.formalAddress = this.formalAddress + \" UNIT# \" + this.UnitNo;\n  } ////GET ADDRESS.ID FOR STRATA.PLAN.ID\n\n\n  this.addressID = '-' + this.streetNumber + '-' + this.streetName + '-' + this.streetType; ////GET STREET.ADDRESS WITHOUT UNIT.NO\n\n  this.streetAddress = this.streetNumber + ' ' + this.streetName.replace('-', ' ') + ' ' + this.streetType; ////GET GOOGLE.SEARCH.LINK FOR COMPLEX.NAME FORM BC.CONDOS.COM\n\n  this.googleSearchLink = \"https://www.google.com/search?q=\" + this.streetAddress.split(' ').join('+');\n\n  if (this.houseType != 'Detached') {\n    this.googleSearchLink += \"+\\\"BCCONDOS\\\"+BUILDING+INFO\";\n  }\n};\n\n;\n/* harmony default export */ __webpack_exports__[\"default\"] = (AddressInfo);\n\n//# sourceURL=webpack:///./app/assets/scripts/modules/AddressInfo.js?");

/***/ }),

/***/ "./app/assets/scripts/modules/LegalDescription.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/@babel/runtime/helpers/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/@babel/runtime/helpers/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);\n\n\n// get strata plan number\nvar strataPlanPrefix = [\"EPS\", \"BCS\", \"LMS\", \"BCP\", \"LMP\", \"NWS\", \"EPP\", \"PLAN\", \"PL\", \"NW\", \"VAS\"];\n\nvar LegalDescription =\n/*#__PURE__*/\nfunction () {\n  function LegalDescription(legal) {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, LegalDescription);\n\n    this.legal = legal.replace(/\\./g, \" \");\n    this.strataPlan1 = \"\";\n    this.strataPlan2 = \"\";\n    this.strataPlan3 = \"\";\n    this.strataPlan4 = \"\";\n    this.LotNumber = \"\";\n    this.blockNumber = \"\";\n    this.ldNumber = \"\";\n    this.secNumber = \"\";\n    this.rngNumber = \"\";\n    this.getNumbers(this.legal);\n  }\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(LegalDescription, [{\n    key: \"getNumbers\",\n    value: function getNumbers(legal) {\n      for (var j = 0; j < strataPlanPrefix.length; j++) {\n        var start = legal.indexOf(strataPlanPrefix[j]);\n\n        if (start >= 0) {\n          var subPlan = legal.substring(start + strataPlanPrefix[j].length).trim();\n          var plan = \"\";\n\n          for (var i = 0; i < subPlan.length; i++) {\n            if (!isNaN(subPlan[i])) {\n              plan += subPlan[i];\n            } else {\n              break;\n            }\n          }\n\n          this.strataPlan1 = strataPlanPrefix[j] + plan.trim();\n          this.strataPlan2 = strataPlanPrefix[j] + plan.trim() + \" \";\n          this.strataPlan3 = strataPlanPrefix[j] + \" \" + plan.trim();\n          this.strataPlan4 = strataPlanPrefix[j] + \" \" + plan.trim() + \" \";\n          return;\n        }\n      }\n\n      this.strataPlan1 = \"strata plan not found\";\n    }\n  }]);\n\n  return LegalDescription;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (LegalDescription);\n\n//# sourceURL=webpack:///./app/assets/scripts/modules/LegalDescription.js?");

/***/ }),

/***/ "./app/assets/scripts/ui/uiListingInfo.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return UIListingInfo; });\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/@babel/runtime/helpers/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/@babel/runtime/helpers/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n// UI element: ListingInfo\n// import GoogleMapsApi from \"../modules/GoogleMapsApi\";\n// const gmapApi = new GoogleMapsApi();\nvar UIListingInfo =\n/*#__PURE__*/\nfunction () {\n  function UIListingInfo() {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, UIListingInfo);\n\n    this.UIDiv = $('<div id=\"uiListingInfo\"></div>');\n    this.UIMap = $('<div id=\"uiListingMap\"></div>');\n    this.UIPics = $('<div id=\"uiListingPics\"></div>');\n    this.listingPic = $('<img src=\"\">');\n    this.mapBox = $('<div id=\"mapBox\"></div>');\n    this.mapView = $('<iframe id=\"mapViewFrame\" src=\"https://bcres.paragonrels.com/ParagonLS/Reports/Report.mvc?listingIDs=262360698&amp;screenWidth=1007&amp;uniqueIDs=&amp;viewID=77&amp;classID=1&amp;usePDF=false&amp;ShowAds=false&amp;searchID=tab4_1_2&amp;listingMode=0&amp;compact=true\" ></iframe>');\n    this.listingID = null;\n    this.mapSrc1 = \"https://bcres.paragonrels.com/ParagonLS/Reports/Report.mvc?listingIDs=\";\n    this.mapSrc2 = \"&screenWidth=1007&uniqueIDs=&viewID=77&classID=1&usePDF=false&ShowAds=false&searchID=tab4_1_2&listingMode=1&compact=true\";\n    this.mlsNo = $(\"<div>MLS #</div>\"); //divs for strata & complex info:\n\n    this.planNo = $('<div id=\"strataPlan\">PlanNo: </div>');\n    this.planLink = $(\"<a href=\\\"https://bcres.paragonrels.com/ParagonLS/Home/Page.mvc#HomeTab\\\" \\n                            target=\\\"HomeTab\\\" id=\\\"strataPlanLink\\\" ></a>\");\n    this.formalAddress = $('<div id=\"formalAddress\"></div>');\n    this.complexSummary = $('<div id=\"complexSummary\"></div>');\n    this.complexName = $('<span id=\"complexName\" class=\"inputHighlight\" >ComplexName</span>');\n    this.complexListingQuantity = $('<span id=\"listingQuantity\"></span>');\n    this.inputComplexName = $('<input class=\"inputHighlight\" name=\"inputComplexName\" id=\"inputComplexName\"/>');\n    this.btnSaveComplexName = $('<button name=\"saveComplexName\" id=\"saveComplexName\" class=\"SearchBtn\">Save Complex</button>'); //Show Large Map\n\n    this.btnShowLargeMap = $('<button name=\"showLargeMap\" id=\"showLargeMap\" class=\"SearchBtn\">Show Pics</button>'); //Exposure\n\n    this.inputExposure = $('<input class=\"inputHighlight\" name=\"inputExposure\" id=\"inputExposure\"/>');\n    this.btnSaveExposure = $('<button name=\"saveExposure\" id=\"saveExposure\" class=\"SearchBtn\">Save Exposure</button>'); //Listing Status\n\n    this.inputListing = $('<input class=\"inputHighlight\" name=\"inputListing\" id=\"inputListing\"/>');\n    this.btnSaveListing = $('<button name=\"saveListing\" id=\"saveListing\" class=\"SearchBtn\">Save Status</button>'); //divs for BC Assessment:\n\n    this.landValue = $('<div id=\"landValue\">land value</div>');\n    this.houseValue = $('<div id=\"houseValue\">house value</div>');\n    this.landValuePercent = $(\"<div>land value percent</div>\");\n    this.houseValuePercent = $(\"<div>house value percent</div>\");\n    this.landHouseRatio = $('<div id=\"land2HouseRatio\">land house ratio</div>');\n    this.totalValue = $('<div id=\"totalValue\"></div>');\n    this.valueChange = $('<div id=\"valueChange\"></div>');\n    this.valueChangePercent = $('<div id=\"valueChangePercent\"></div>');\n    this.oldTimerLotValuePerSF = $('<div id=\"oldTimerLotValuePerSF\"></div>');\n    this.marketValuePerSF = $('<div id=\"marketValuePerSF\"></div>'); //divs for remarks:\n\n    this.realtorRemarks = $('<div id=\"realtorRemarks\"></div>');\n    this.publicRemarks = $('<div id=\"publicRemarks\"></div>'); //divs for listing agent sms:\n\n    this.listingAgentSMS = $('<div id=\"listingAgentSMS\"></div>'); //divs for showing info:\n\n    this.showingInfo = $('<div id=\"showingInfo\">Showing info:</div>');\n    this.inputClientName = $('<span>ClientName:</span><input id=\"clientName\" class=\"inputHighlight\"  type=\"text\"/>');\n    this.inputShowingNote = $('<span>ShowingNote:</span><input id =\"showingNote\" class=\"inputHighlight\" type=\"text\"/>');\n    this.inputShowingDate = $('<span>Date:</span><input id=\"showingDate\" class=\"inputHighlight\" />');\n    this.inputShowingTime = $('<span>Time:</span><input id=\"showingTime\" class=\"inputHighlight\" />');\n    this.btnSaveShowing = $('<button id=\"saveShowing\" class=\"SearchBtn\">Save</button>'); //Google Map Apis\n\n    this.map = null;\n    this.geocoder = null; //assemble the elements:\n\n    this.buildUI();\n  }\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(UIListingInfo, [{\n    key: \"buildMapSrc\",\n    value: function buildMapSrc(listingID) {\n      var src = this.mapSrc1 + listingID + this.mapSrc2;\n      return src;\n    }\n  }, {\n    key: \"buildUI\",\n    value: function buildUI() {\n      var uiDiv = this.UIDiv;\n      var uiMap = this.UIMap;\n      var uiPics = this.UIPics;\n      this.mapBox.append(this.mapView);\n      uiMap.append(this.mapBox); //add images\n\n      var i = 0;\n\n      for (i = 0; i < 20; i++) {\n        var imgAnchor = $('<a href=\"\"></a>');\n        imgAnchor.attr(\"id\", \"imgAnchor\" + i);\n        var tempPic = $('<img src=\"\">');\n        tempPic.attr(\"id\", \"img\" + i);\n        tempPic.addClass(\"picBox\");\n        tempPic.appendTo(imgAnchor); //uiPics.append(tempPic);\n\n        uiPics.append(imgAnchor);\n      }\n\n      uiDiv.append(this.mlsNo); //add strata & complex info\n\n      this.planLink.appendTo(this.planNo);\n      uiDiv.append(this.planNo);\n      uiDiv.append(this.formalAddress);\n      this.complexName.appendTo(this.complexSummary);\n      this.complexListingQuantity.appendTo(this.complexSummary);\n      uiDiv.append(this.complexSummary);\n      uiDiv.append(this.inputComplexName);\n      uiDiv.append(this.btnSaveComplexName); //add exposure elements:\n\n      uiDiv.append(this.inputExposure);\n      uiDiv.append(this.btnSaveExposure); //\n\n      uiDiv.append(this.btnShowLargeMap); //add listing status elements:\n\n      uiDiv.append(this.inputListing);\n      uiDiv.append(this.btnSaveListing); //add bca info\n\n      uiDiv.append($(\"<hr/>\"));\n      uiDiv.append(this.landValue);\n      uiDiv.append(this.houseValue);\n      uiDiv.append(this.totalValue);\n      uiDiv.append(this.valueChange);\n      uiDiv.append(this.oldTimerLotValuePerSF);\n      uiDiv.append(this.marketValuePerSF); //add remarks\n\n      uiDiv.append($(\"<hr/>\"));\n      uiDiv.append(this.listingAgentSMS);\n      uiDiv.append($(\"<hr/>\"));\n      uiDiv.append(this.realtorRemarks);\n      uiDiv.append(this.publicRemarks); //add showing info\n\n      uiDiv.append($(\"<hr/>\"));\n      uiDiv.append(this.showingInfo);\n      uiDiv.append(this.inputClientName);\n      uiDiv.append(this.inputShowingNote);\n      uiDiv.append(this.inputShowingDate);\n      uiDiv.append(this.inputShowingTime);\n      uiDiv.append(this.btnSaveShowing);\n    }\n  }, {\n    key: \"showUI\",\n    value: function showUI(container) {\n      //map\n      this.mapView.attr(\"src\", this.buildMapSrc(this.listingID));\n      this.UIMap.appendTo(container);\n      this.UIPics.appendTo(container);\n      this.UIPics.addClass(\"picContainer\");\n      this.UIMap.addClass(\"mapView\");\n      this.mapBox.addClass(\"mapBox\");\n      this.mapView.addClass(\"mapBox\");\n      this.UIDiv.appendTo(container);\n      this.UIDiv.addClass(\"uilistinginfo\"); //change inputbox width:\n\n      this.UIDiv.children(\"input\").addClass(\"inputbox\");\n      this.realtorRemarks.addClass(\"bottomline\");\n    }\n  }]);\n\n  return UIListingInfo;\n}();\n\n\n\n//# sourceURL=webpack:///./app/assets/scripts/ui/uiListingInfo.js?");

/***/ }),

/***/ "./app/content/mls-FullRealtor.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _assets_scripts_modules_LegalDescription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./app/assets/scripts/modules/LegalDescription.js\");\n/* harmony import */ var _assets_scripts_modules_AddressInfo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./app/assets/scripts/modules/AddressInfo.js\");\n/* harmony import */ var _assets_scripts_ui_uiListingInfo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./app/assets/scripts/ui/uiListingInfo.js\");\n//add extra functions to the full realtor report\n//show bca info\n//show strata info\n//cal unit price, percent numbers\n//manifest matches: \"https://bcres.paragonrels.com/ParagonLS/Reports/Report.mvc?listingIDs=*viewID=c65*\"\n//production file name: MLS-FullRealtor.js\n\n\n\n\n\n //import { mainNavItem } from '../assets/scripts/modules/MainNavBar';\n//var curTabID = null;\n\nvar $fx = L$();\nconsole.clear();\nvar fullRealtor = {\n  init: function init() {\n    //console.clear();\n    //read full realtor report, get listing data\n    //$fx.getCurrentTab(curTabID);\n    //link to iframe's tabID\n    this.tabID = $fx.getTabID(window.frameElement.src);\n\n    if (this.tabID == \"#\") {\n      // if could not find the tabID, goes to the parent windows\n      this.tabID = $fx.getTabID(window.parent.frameElement.src);\n    }\n\n    this.lockMapSize = $(\"input#checkShowSmallMap\", top.document).is(\":checked\");\n    var frame = window.frameElement;\n    frame.style.height = \"832px\"; //this.listingID = $fx.getListingID(window.frameElement.src);\n\n    try {\n      this.listingID = $(\"img#imgIcon\").attr(\"listingID\"); //GET LISTING.ID FROM MAP.IMAGE.ICON\n    } catch (err) {\n      console.log(\"ListingID for Map View Could not be found \");\n      this.listingID = \"\";\n    }\n\n    if (this.tabID == \"#\") {\n      this.tabID = $fx.getTabID(parent.document.URL);\n      this.subTabID = $fx.getSubTabID(parent.document.URL);\n      this.listingID = $fx.getListingID(parent.document.URL);\n    } else {\n      this.subTabID = $fx.getSubTabID(window.frameElement.src);\n      this.listingID = $fx.getListingID(window.frameElement.src);\n    }\n\n    if (!this.listingID || this.listingID.indexOf(\"https\") >= 0) {\n      this.subTabID = $fx.getSubTabID(window.frameElement.src);\n      this.listingID = $fx.getListingID(window.frameElement.src);\n    }\n\n    this.tabNo = parseInt(this.tabID.replace(\"#tab\", \"\"));\n    var x = $(\"ul#tab-bg\", top.document); //find the top tab panel\n\n    var y = x.children(\"li\")[this.tabNo];\n    this.tabTitle = $(y).children().find(\"span\").text().trim();\n    console.warn(\"[FR]===>tabID, tabNo, tabTitle\", this.tabID, this.tabNo, this.tabTitle);\n    console.warn(\"[FR]===>window.frameElement.id\", this.tabID); //this.spreadsheetTable = parent.document.querySelector('#ifSpreadsheet').contentDocument.querySelector('#grid');\n\n    try {\n      this.spreadsheetTable = top.document.querySelector(this.subTabID).contentDocument.querySelector(\"#ifSpreadsheet\").contentDocument.querySelector(\"#grid\");\n    } catch (err) {\n      console.log(\"FR=> Could not Find SpreadSheet Table!\");\n      this.spreadsheetTable = null;\n    }\n\n    chrome.storage.local.set({\n      curTabID: this.tabID\n    }); //this.lockVisibility();\n\n    this.addLock(this.tabID);\n    console.warn(\"[FR]===>tabContentContainer: \", this.tabContentContainer);\n    this.clearAssess();\n    this.houseListingType = this.houseType.text().replace(\",\", \"\").replace(\" \", \"\");\n    $fx.setHouseType(this.houseListingType);\n\n    if (this.houseListingType === \"Detached\") {\n      this.listingAgentName = $('div[style=\"top:784px;left:595px;width:163px;height:15px;\"]');\n    }\n\n    this.getMorePropertyInfo(); //get pid, complexName, lotArea, etc.\n\n    this.calculateSFPrice(); ////CHANGE THE MODEL.BOX WIDTH\n\n    if (!!parent.document.getElementById(\"cboxOverlay\")) {\n      try {\n        var colorbox = parent.document.getElementById(\"colorbox\");\n        colorbox.style.width = \"975px\";\n        var cboxWrapper = parent.document.getElementById(\"cboxWrapper\");\n        cboxWrapper.style.width = \"975px\";\n        var cboxTopCenter = parent.document.getElementById(\"cboxTopCenter\");\n        cboxTopCenter.style.width = \"930px\";\n        var cboxBottomCenter = parent.document.getElementById(\"cboxBottomCenter\");\n        cboxBottomCenter.style.width = \"930px\";\n        var cboxTopCenter = parent.document.getElementById(\"cboxContent\");\n        cboxTopCenter.style.width = \"930px\";\n        var cboxBottomCenter = parent.document.getElementById(\"cboxLoadedContent\");\n        cboxBottomCenter.style.width = \"930px\";\n      } catch (err) {\n        console.log(\"ReShape the display box failed!\", err);\n      }\n    } //create extra listing info UI:\n\n\n    this.uiListingInfo.listingID = this.listingID;\n    this.uiListingInfo.showUI(this.report);\n\n    try {\n      this.picLinkValues = this.picLinks.val().split(\",\");\n    } catch (err) {\n      this.picLinkValues[0] = $('img[id=\"img0\"]').attr(\"src\");\n      console.log(\"Only One Pictures\");\n    } //send out data to topdocuemnts\n\n\n    var propertyType = $(\"input#inputListingInfo\", top.document);\n    propertyType.val(this.houseType.text().replace(\",\", \"\").replace(\" \", \"\"));\n    this.populateUiListing(); //add event listeners:\n\n    this.addDataEvents();\n    this.addStrataEvents();\n    this.addComplexEvent();\n    this.addExposureEvent();\n    this.addListingEvent();\n    this.addShowingEvent();\n    this.addLargeMapEvent();\n\n    if (!this.lockMapSize) {\n      this.showLargeMap();\n    } else {\n      this.uiListingInfo.UIPics.css(\"z-index\", 10);\n      this.addPics();\n    } //do searches:\n\n\n    this.searchStrataPlanSummary();\n    var that = this;\n    setTimeout(function () {\n      that.searchTax();\n    }, 500); //delay does not help the tab jumps issue\n    //this.lockVisibility();\n  },\n  uiListingInfo: new _assets_scripts_ui_uiListingInfo__WEBPACK_IMPORTED_MODULE_3__[\"default\"](),\n  listingID: \"\",\n  //elements on the page\n  houseType: $('div[style=\"top:32px;left:46px;width:61px;height:14px;\"]'),\n  div: $(\"div.mls0\"),\n  lp: $('div[style=\"top:7px;left:571px;width:147px;height:13px;\"]'),\n  sp: $('div[style=\"top:23px;left:571px;width:147px;height:15px;\"]'),\n  lotArea: null,\n  //lotArea from getMorePropertyInfo\n  finishedFloorArea: null,\n  // from getMorePropertyInfo\n  report: $(\"div#divHtmlReport\"),\n  pid: null,\n  //pid from getMorePropertyInfo\n  complexOrSubdivision: null,\n  //complex name from getMorePropertyInfo\n  exposure: null,\n  //condo unit's exposure info\n  mlsNo: $('div[style=\"top:18px;left:4px;width:123px;height:13px;\"] a'),\n  legal: $('div[style=\"top:426px;left:75px;width:593px;height:22px;\"]'),\n  realtorRemarks: $('div[style=\"top:860px;left:53px;width:713px;height:35px;\"]'),\n  //'div[style=\"top:860px;left:53px;width:710px;height:35px;\"]'\n  publicRemarks: $('div[style=\"top:897px;left:4px;width:758px;height:73px;\"]'),\n  // add listing agent name and telephone number\n  listingAgentName: $('div[style=\"top:784px;left:525px;width:233px;height:15px;\"]'),\n  listingAgentNumber: $('div[style=\"top:796px;left:612px;width:153px;height:13px;\"]'),\n  keyword: $(\"div#app_banner_links_left input.select2-search__field\", top.document),\n  spreadsheetTable: null,\n  curPage: parent.document.querySelector(\"#txtCurPage\"),\n  //pictures links\n  featurepic: $(),\n  //picLinks: $('input[id=\"aryPicDataSpinner0\"]'), //aryPicDataPopup0\n  picLinks: $('input[id=\"aryPicDataPopup0\"]'),\n  //\n  picLinkValues: [],\n  //complex info:\n  address: $('div[style=\"top:4px;left:134px;width:483px;height:17px;\"]'),\n  houseListingType: null,\n  subArea: $('div[style=\"top:20px;left:134px;width:483px;height:13px;\"]'),\n  neighborhood: $('div[style=\"top:33px;left:134px;width:483px;height:13px;\"]'),\n  postcode: $('div[style=\"top:46px;left:306px;width:130px;height:13px;\"]'),\n  dwellingType: $('div[style=\"top:46px;left:4px;width:137px;height:15px;\"]'),\n  totalUnits: null,\n  //from getMorePropertyInfo\n  devUnits: null,\n  //from getMorePropertyInfo\n  saveComplexButton: null,\n  saveExposureButton: null,\n  saveListingButton: null,\n  saveShowingButton: null,\n  showLargeMapButton: null,\n  legalDesc: null,\n  //need be inited at addStrataPlan\n  strataPlan: null,\n  //new strataPlan field, to be added\n  formalAddress: null,\n  //new formal Address field, to be added\n  strataPlanLink: null,\n  //new strataPlan search link, to be added\n  complexSummary: null,\n  //new complex summary data, to be added\n  complexName: null,\n  complexListingSummary: null,\n  bcAssess: null,\n  bcLand: null,\n  bcImprovement: null,\n  bcLand2ImprovementRatio: null,\n  valueChange: null,\n  valueChangePercent: null,\n  oldTimerLotValuePerSF: null,\n  marketLotValuePerSF: null,\n  marketHouseValuePerSF: null,\n  street: null,\n  streetNumber: null,\n  tabID: null,\n  subTabID: null,\n  tabNo: 0,\n  tabTitle: \"\",\n  tabContentContainer: null,\n  lockVisibility: function lockVisibility() {\n    var divTab = $(\"div\" + this.tabID, top.document);\n    var divTaxSearch = $(\"div#tab1\", top.document);\n    this.tabContentContainer = divTab; //console.log(divTab);\n\n    divTab.attr(\"style\", \"display: block!important\");\n    divTaxSearch.attr(\"style\", \"display: none!important\");\n    chrome.storage.local.set({\n      curTabID: this.tabID\n    });\n  },\n  addLock: function addLock(tabID) {\n    chrome.runtime.sendMessage(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()({\n      from: \"FullRealtorReport\",\n      todo: \"addLock\",\n      tabID: tabID\n    }, \"tabID\", tabID), function (response) {\n      console.log(\"FullRealtorReport got tax response:\", response);\n    });\n  },\n  getMorePropertyInfo: function getMorePropertyInfo() {\n    var self = this;\n    var listingHouseType = self.houseType.text().replace(\",\", \"\").replace(\" \", \"\");\n    var $lotAreaAcres;\n    var $lotAreaHect;\n    var $lotAreaSqM;\n\n    switch (listingHouseType) {\n      case \"Attached\":\n        self.pid = $('div[style=\"top:194px;left:355px;width:82px;height:15px;\"]'); //P.I.D.\n        //\n\n        self.complexOrSubdivision = $('div[style=\"top:236px;left:381px;width:383px;height:13px;\"]'); //Complex/Subdiv\n\n        self.exposure = $('div[style=\"top:161px;left:355px;width:93px;height:15px;]'); //Exposure\n\n        self.totalUnits = $('div[style=\"top:326px;left:659px;width:101px;height:16px;\"'); //Total units in Strata\n\n        self.devUnits = $('div[style=\"top:326px;left:470px;width:95px;height:15px;\"'); //Units in Development\n\n        self.lotArea = $('div[style=\"top:129px;left:355px;width:75px;height:13px;\"'); //Sq. Footage\n\n        self.finishedFloorArea = $('div[style=\"top:698px;left:120px;width:50px;height:16px;\"]'); //finishedFloorArea\n\n        break;\n\n      case \"Detached\":\n        try {\n          self.pid = $('div[style=\"top:198px;left:681px;width:82px;height:15px;\"]'); //P.I.D.\n\n          if (self.pid.length == 0) {\n            self.pid = $('div[style=\"top:198px;left:681px;width:83px;height:15px;\"]'); //P.I.D.\n          }\n        } catch (err) {} //top:198px;left:681px;width:83px;height:15px;\n\n\n        self.complexOrSubdivision = $('div[style=\"top:229px;left:393px;width:369px;height:13px;\"]'); //Complex/Subdiv\n\n        self.exposure = $('div[style=\"top:181px;left:375px;width:63px;height:13px;]'); //Rear Yard Exposure of detached house\n\n        self.lotArea = $('div[style=\"top:133px;left:375px;width:67px;height:13px;\"'); //\n\n        self.devUnits = $(\"<div>1</div>\"); // N/A for single house\n\n        self.totalUnits = $(\"<div>1</div>\"); // N/A for single house\n\n        self.finishedFloorArea = $('div[style=\"top:698px;left:120px;width:50px;height:16px;\"]'); //finishedFloorArea\n\n        break;\n\n      case \"Land Only\":\n        self.pid = $('div[style=\"top:117px;left:536px;width:82px;height:15px;\"]'); //P.I.D.\n\n        self.complexOrSubdivision = $('div[style=\"top:101px;left:536px;width:227px;height:15px;\"]'); //Complex/Subdiv\n\n        self.lotArea = $('div[style=\"top:242px;left:687px;width:75px;height:16px;\"'); // Area in Square Feet\n\n        $lotAreaAcres = $('div[style=\"top:210px;left:687px;width:75px;height:16px;\"'); // Area in Acres\n\n        $lotAreaHect = $('div[style=\"top:226px;left:687px;width:75px;height:16px;\"'); // Area in Hect\n\n        $lotAreaSqM = $('div[style=\"top:258px;left:687px;width:75px;height:16px;\"'); // Area in Square Meters\n\n        if (self.lotArea.text() == \"0.00\") {\n          var x = $lotAreaAcres.text();\n          var lotAreaAcres = $fx.convertStringToDecimal(x, true);\n          var lotAreaInSquareFeet = lotAreaAcres * 43560;\n          var lotAreaInSquareMeters = lotAreaInSquareFeet / 10.76;\n          self.lotArea.text($fx.numberWithCommas(lotAreaInSquareFeet.toFixed(0)));\n          $lotAreaSqM.text($fx.numberWithCommas(lotAreaInSquareMeters.toFixed(0)));\n        }\n\n        self.devUnits = $(\"<div>1</div>\"); // N/A for Land Only\n\n        self.totalUnits = $(\"<div>1</div>\"); // N/A for Land Only\n\n        self.finishedFloorArea = $(\"<div>1</div>\"); // N/A for Land Only\n\n        break;\n    }\n  },\n  calculateSFPrice: function calculateSFPrice() {\n    //console.log(this.lp.text(), this.sp.text(), this.finishedFloorArea.text());\n    var listPrice = $fx.convertStringToDecimal(this.lp.text());\n    var soldPrice = $fx.convertStringToDecimal(this.sp.text());\n    var baseArea;\n\n    if (this.houseListingType != \"Land Only\") {\n      baseArea = $fx.convertStringToDecimal(this.finishedFloorArea.text());\n    } else {\n      baseArea = $fx.convertStringToDecimal(this.lotArea.text());\n    }\n\n    var sfPriceList = listPrice / baseArea;\n    var sfPriceSold = soldPrice / baseArea;\n    this.lp.text(this.lp.text() + \" [$\" + sfPriceList.toFixed(0) + \"/sf]\");\n\n    if (sfPriceSold > 0) {\n      this.sp.text(this.sp.text() + \" [$\" + sfPriceSold.toFixed(0) + \"/sf]\");\n    }\n  },\n  populateUiListing: function populateUiListing() {\n    this.addMLSNo();\n    this.addStrataPlan(); //move this operation inside updateAssessment\n\n    this.addComplexInfo(); //\n\n    this.addBCAssessment();\n    this.addRemarks(); //this.addPics();\n\n    this.addShowingInfo(); //add showing schedule info\n  },\n  addDataEvents: function addDataEvents() {\n    (function onEvents(self) {\n      chrome.storage.onChanged.addListener(function (changes, area) {\n        console.debug(\"====>fullrealtor: got a message: !\", changes);\n\n        if (area == \"local\" && \"from\" in changes) {\n          if (changes.from.newValue.indexOf(\"assess\") > -1 && changes.from.newValue.indexOf(\"ForListingReport\") > -1) {\n            self.updateAssess();\n          }\n\n          if (changes.from.newValue.indexOf(\"strataPlanSummary\") > -1) {\n            self.updateComplexListingQuan(changes); //self.syncTabToContent();\n            //let topTabInfo = new TopTabInfo(curTabID);\n            //topTabInfo.ActiveThisTab();\n          }\n\n          if (changes.from.newValue.indexOf(\"complexInfo\") > -1 && changes.from.newValue.indexOf(\"fullRealtorReport\") > -1) {\n            self.updateComplexInfo();\n          }\n\n          if (changes.from.newValue.indexOf(\"exposure\") > -1 && changes.from.newValue.indexOf(\"fullRealtorReport\") > -1) {\n            self.updateExposureInfo();\n          }\n\n          if (changes.from.newValue.indexOf(\"listing\") > -1 && changes.from.newValue.indexOf(\"fullRealtorReport\") > -1) {\n            self.updateListingInfo();\n          }\n\n          if (changes.from.newValue.indexOf(\"showing\") > -1 && changes.from.newValue.indexOf(\"fullRealtorReport\") > -1) {\n            self.updateShowingInfo();\n          }\n\n          console.log(\"this: \", self);\n        }\n      });\n    })(this);\n  },\n  addPics: function addPics() {\n    var _this = this;\n\n    var totalPics = this.picLinkValues.length;\n    var i = 0;\n\n    var _loop = function _loop() {\n      _this.uiListingInfo.UIPics.children(\"#imgAnchor\" + i).attr(\"href\", \"\" //this.picLinkValues[i]\n      );\n\n      _this.uiListingInfo.UIPics.children(\"#imgAnchor\" + i).children(\"#img\" + i).attr(\"src\", _this.picLinkValues[i]);\n\n      var elementPic = document.getElementById(\"img\" + i);\n\n      if (i != 0) {\n        if (elementPic) {\n          elementPic.addEventListener(\"click\", function () {\n            window.open(elementPic.src);\n          });\n        }\n      }\n    };\n\n    for (i = 0; i < totalPics; i++) {\n      _loop();\n    }\n\n    for (i = totalPics; i <= 20; i++) {\n      this.uiListingInfo.UIPics.children(\"#imgAnchor\" + i).children(\"#img\" + i).addClass(\"picHidden\");\n    }\n  },\n  addMLSNo: function addMLSNo() {\n    var mlsNO = this.mlsNo.text();\n    this.uiListingInfo.mlsNo.text(mlsNO);\n  },\n  addStrataPlan: function addStrataPlan(planNum) {\n    var legal = \"\";\n\n    if (planNum == undefined) {\n      legal = this.legal.text(); //get legal description from the Report\n    } else {\n      legal = planNum.toString();\n    }\n\n    var legalDesc = this.legalDesc = new _assets_scripts_modules_LegalDescription__WEBPACK_IMPORTED_MODULE_1__[\"default\"](legal);\n    var complexName = this.complexOrSubdivision.text();\n    this.strataPlan = legalDesc.strataPlan1; //set up the strata Plan number\n\n    this.uiListingInfo.planLink.text(legalDesc.strataPlan1 + (planNum == undefined ? \"\" : \"*\"));\n    this.saveComplexButton = $(\"#saveComplexName\");\n    this.saveExposureButton = $(\"#saveExposure\");\n    this.saveListingButton = $(\"#saveListing\");\n    this.saveShowingButton = $(\"#saveShowing\");\n    this.showLargeMapButton = $(\"#showLargeMap\");\n    this.strataPlanLink = $(\"#strataPlanLink\");\n    this.complexSummary = $(\"#complexSummary\");\n    this.complexName = $(\"#complexName\");\n\n    if (complexName) {\n      this.complexName.text(complexName + \": \");\n    }\n\n    this.complexListingSummary = $(\"#listingQuantity\");\n    this.formalAddress = $(\"#formalAddress\");\n\n    if (planNum != undefined) {\n      //Start PlanNum Search:\n      chrome.storage.local.set({\n        strataPlan1: legalDesc.strataPlan1,\n        strataPlan2: legalDesc.strataPlan2,\n        strataPlan3: legalDesc.strataPlan3,\n        strataPlan4: legalDesc.strataPlan4\n      });\n    }\n  },\n  addComplexInfo: function addComplexInfo(complex) {\n    var self = this;\n    var subArea = self.subArea.text();\n    var neighborhood = self.neighborhood.text();\n    var postcode = self.postcode.text();\n    var dwellingType = self.dwellingType.text();\n    var complexName = complex || self.complexOrSubdivision.text().trim();\n    complexName = $fx.normalizeComplexName(complexName);\n\n    if (typeof complexName != \"string\" && complexName.length <= 0) {\n      console.log(\"ComplexName does not existed\"); ////exit\n\n      return;\n    }\n\n    var addressSelect = \"\";\n    var isFormalAddress = true;\n\n    if (typeof self.formalAddress.text() == \"string\" && self.formalAddress.text().length > 0) {\n      addressSelect = self.formalAddress.text();\n    } else {\n      addressSelect = self.address.text();\n      isFormalAddress = false;\n    }\n\n    var address = new _assets_scripts_modules_AddressInfo__WEBPACK_IMPORTED_MODULE_2__[\"default\"](addressSelect, this.houseListingType, isFormalAddress); //todo list...\n\n    var strataPlan = self.strataPlan;\n    var totalUnits = self.totalUnits.text();\n    var devUnits = self.devUnits.text();\n    var complexInfo = {\n      _id: strataPlan + \"-\" + address.streetNumber + \"-\" + address.streetName + \"-\" + address.streetType,\n      name: $fx.normalizeComplexName(complexName),\n      complexName: complexName,\n      strataPlan: strataPlan,\n      addDate: $fx.getToday(),\n      subArea: subArea,\n      neighborhood: neighborhood,\n      postcode: postcode,\n      streetNumber: address.streetNumber,\n      streetName: address.streetName + address.streetType,\n      dwellingType: dwellingType,\n      totalUnits: totalUnits,\n      devUnits: devUnits,\n      todo: complex != undefined ? \"saveComplexInfo\" : \"searchComplexInfo\",\n      from: \"fullRealtorReport\"\n    }; //console.log('===>add ComplexInfo: ', complexInfo);\n\n    chrome.runtime.sendMessage(complexInfo, function (response) {\n      if (response) {\n        self.complexName.text(response.name);\n        self.complexOrSubdivision.text(response.name);\n      }\n    });\n  },\n  updateComplexInfo: function updateComplexInfo() {\n    var self = this;\n    var $inputName = $(\"#inputComplexName\");\n    var compName = \"\";\n    chrome.storage.local.get(\"complexName\", function (result) {\n      if (result) {\n        compName = $fx.normalizeComplexName(result.complexName);\n        self.complexName.text(compName);\n        self.complexOrSubdivision.text(compName);\n        $inputName.val(compName);\n      }\n    });\n  },\n  addExposureInfo: function addExposureInfo(exposure) {\n    var self = this;\n    var exposureName = exposure || self.exposure.text().trim();\n\n    if (typeof exposureName != \"string\" && exposureName.length <= 0) {\n      console.log(\"exposureName does not existed\"); ////exit\n\n      return;\n    }\n\n    var exposureInfo = {\n      _id: self.pid.text(),\n      name: exposureName,\n      exposureName: exposureName,\n      addDate: $fx.getToday(),\n      todo: exposure != undefined ? \"saveExposure\" : \"searchExposure\",\n      from: \"fullRealtorReport\"\n    };\n    console.log(\"===>add ExposureInfo: \", exposureInfo);\n    chrome.runtime.sendMessage(exposureInfo, function (response) {\n      if (response) {\n        self.exposure.text(response.name);\n      }\n    });\n  },\n  addListingInfo: function addListingInfo(listing) {\n    var self = this;\n    var listingName = listing || \"\";\n\n    if (typeof listingName != \"string\" && listingName.length <= 0) {\n      console.log(\"listingName does not existed\"); ////exit\n\n      return;\n    }\n\n    var listingInfo = {\n      _id: self.mlsNo.text(),\n      name: listingName,\n      listingName: listingName,\n      addDate: $fx.getToday(),\n      todo: listing != undefined ? \"saveListing\" : \"searchListing\",\n      from: \"fullRealtorReport\"\n    };\n    console.log(\"===>add ListingInfo: \", listingInfo);\n    chrome.runtime.sendMessage(listingInfo, function (response) {\n      if (response) {\n        self.uiListingInfo.inputListing.text(response.name);\n        navigator.clipboard.writeText(response.name).then(function () {\n          console.log(\"Listing Status Copied Done!\");\n        });\n      }\n    });\n  },\n  addBCAssessment: function addBCAssessment() {\n    //set bc assessment properties:\n    this.bcAssess = $(\"#totalValue\");\n    this.bcLand = $(\"#landValue\");\n    this.bcImprovement = $(\"#houseValue\");\n    this.bcLand2ImprovementRatio = $(\"#land2HouseRatio\");\n    this.valueChange = $(\"#valueChange\");\n    this.valueChangePercent = $(\"#valueChangePercent\");\n    this.oldTimerLotValuePerSF = $(\"#oldTimerLotValuePerSF\");\n    this.marketValuePerSF = $(\"#marketValuePerSF\");\n  },\n  addRemarks: function addRemarks() {\n    var _this2 = this;\n\n    //get realtor remarks:\n    var realtorRemarks = this.realtorRemarks.text();\n    this.uiListingInfo.realtorRemarks.text(realtorRemarks); //get public remarks:\n\n    var publicRemarks = this.publicRemarks.text();\n    this.uiListingInfo.publicRemarks.text(publicRemarks); // add listing agent sms\n\n    var listingAgentFirstName = this.listingAgentName.text().split(\" \")[0]; // transfer to Capital Case\n\n    listingAgentFirstName = listingAgentFirstName.charAt(0).toUpperCase() + listingAgentFirstName.slice(1).toLowerCase(); // get cell number\n\n    var listingAgentNumber = this.listingAgentNumber.text().replaceAll(\"-\", \"\");\n    var listingAgentSMS = \"Hi \".concat(listingAgentFirstName, \", this is Peter Qu from Magsen Realty. \\n                          I am wondering if your listing \").concat(this.address.text(), \" [\").concat(this.mlsNo.text(), \", \").concat(this.neighborhood.text(), \" | \").concat(this.subArea.text(), \", \\n                            asking \").concat(this.lp.text(), \", \").concat(this.finishedFloorArea.text(), \"SF] is still available? Please advise. \\n                          Thank you.\\n                          </br></br>\\n                          Peter Qu</br>\\n                          Magsen Realty Inc.</br></br>\\n                          \").concat(listingAgentNumber);\n    this.uiListingInfo.listingAgentSMS.html(listingAgentSMS); //highlight no-name words\n\n    var noNames = [\"text\", \"touchbase\", \"email\", \"hi please\"];\n\n    try {\n      noNames.forEach(function (noName) {\n        $fx.highlight_words(noName, _this2.uiListingInfo.listingAgentSMS);\n      });\n    } catch (e) {\n      console.error(e);\n    } //highlight keyword in public remarks:\n\n\n    var keywordArray;\n    var self = this;\n\n    try {\n      keywordArray = this.keyword.val().toString().split(\",\");\n      keywordArray.forEach(function (element) {\n        $fx.highlight_words(element, self.uiListingInfo.publicRemarks);\n      });\n      keywordArray.forEach(function (keyword) {\n        $fx.highlight_words(keyword, self.uiListingInfo.realtorRemarks);\n      });\n      chrome.storage.local.set({\n        keywords: this.keyword.val().toString()\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  },\n\n  /******************\r\n   * 1) define showing button:\r\n   * 2) assign showingButton element;\r\n   * 3) Add showing button event:\r\n   * 4) saveShowingInfo: button click event function\r\n   * 4) addShowingInfo: search or save showingInfo from dbShowing\r\n   * 5) updateShowingInfo: update the showingInfo to Screen\r\n   */\n  addShowingInfo: function addShowingInfo(showing) {\n    var self = this;\n    var showingID = showing || self.mlsNo.text();\n\n    if (typeof showingID != \"string\" && showingID.length <= 0) {\n      console.log(\"ShowingID does not existed\"); ////exit\n\n      return;\n    }\n\n    var clientName = $(\"#clientName\").val();\n    var showingNote = $(\"#showingNote\").val();\n    var showingDate = $(\"#showingDate\").val();\n    var showingTime = $(\"#showingTime\").val();\n    var showingInfo = {\n      _id: self.mlsNo.text(),\n      name: clientName,\n      addDate: $fx.getToday(),\n      clientName: clientName,\n      showingNote: showingNote,\n      showingDate: showingDate,\n      showingTime: showingTime,\n      todo: showing != undefined ? \"saveShowing\" : \"searchShowing\",\n      from: \"fullRealtorReport\"\n    }; //console.log('===>add ComplexInfo: ', complexInfo);\n\n    chrome.runtime.sendMessage(showingInfo, function (response) {\n      if (response) {\n        self.uiListingInfo.clientName.text(response.name);\n      }\n    });\n  },\n  searchTax: function searchTax() {\n    var PID = this.pid.text();\n    var self = this;\n    console.log(\"[FR]===>Check the container class before TaxSearch:\", self.tabContentContainer);\n\n    if (!PID) {\n      console.log(\"[FR] - P.I.D Could not be read, taxSearch Exit\");\n      return;\n    }\n\n    chrome.storage.local.set({\n      PID: PID\n    });\n    chrome.storage.local.get(\"PID\", function (result) {\n      //console.log(\">>>PID saved for tax search: \", result.PID);\n      chrome.runtime.sendMessage({\n        from: \"ListingReport\",\n        todo: \"taxSearch\"\n      }, function (response) {\n        //console.log('>>>mls-fullpublic got tax response:', response);\n        var divTab = $(\"div\" + self.tabID, top.document);\n        var divTaxSearch = $(\"div#tab1\", top.document);\n        self.tabContentContainer = divTab;\n        console.log(divTab);\n        divTab.attr(\"style\", \"display: block!important\");\n        divTaxSearch.attr(\"style\", \"display: none!important\");\n        chrome.storage.local.set({\n          curTabID: self.tabID\n        });\n      });\n    });\n  },\n  searchStrataPlanSummary: function searchStrataPlanSummary() {\n    var strataPlan = this.legalDesc.strataPlan1;\n    var complexName = this.complexOrSubdivision.text();\n    complexName = $fx.normalizeComplexName(complexName); ////NORMALIZE THE COMPLEX NAME FROM THE REPORT\n\n    chrome.storage.local.set({\n      strataPlan: strataPlan,\n      complexNameForListingCount: complexName\n    }, function (e) {\n      chrome.runtime.sendMessage({\n        from: \"ListingReport\",\n        todo: \"searchStrataPlanSummary\",\n        showResult: true,\n        saveResult: true\n      }, function (response) {});\n    });\n  },\n  //send strata plan number to Home Tab - Quick search\n  addStrataEvents: function addStrataEvents() {\n    var self = this;\n    this.strataPlanLink.click(function (e) {\n      e.preventDefault();\n      var homeTab = $(\"#HomeTabLink\", top.document);\n      homeTab[0].click(); //console.log(\"strata plan Link Clicked!\");\n\n      var mlsDateLow = $(\"#f_33_Low__1-2-3-4\");\n      var mlsDateHigh = $(\"#f_33_High__1-2-3-4\");\n      var divTab = $(\"div\" + this.tabID, top.document); //console.log(divTab);\n\n      divTab.removeAttr(\"style\");\n      chrome.runtime.sendMessage({\n        from: \"ListingReport\",\n        todo: \"switchTab\",\n        showResult: false,\n        saveResult: true\n      }, function (response) {//console.log('mls-fullrealtor got response: ', response);\n      });\n    });\n  },\n  addComplexEvent: function addComplexEvent() {\n    (function event(self) {\n      self.saveComplexButton.click(self.saveComplexInfo.bind(self));\n    })(this);\n  },\n  addExposureEvent: function addExposureEvent() {\n    (function event(self) {\n      self.saveExposureButton.click(self.saveExposureInfo.bind(self));\n    })(this);\n  },\n  // add listing status, response to listing status button\n  addListingEvent: function addListingEvent() {\n    (function event(self) {\n      self.saveListingButton.click(self.saveListingInfo.bind(self));\n    })(this);\n  },\n  addShowingEvent: function addShowingEvent() {\n    (function event(self) {\n      self.saveShowingButton.click(self.saveShowingInfo.bind(self));\n    })(this);\n  },\n  addLargeMapEvent: function addLargeMapEvent() {\n    (function event(self) {\n      self.showLargeMapButton.click(self.showLargeMap.bind(self));\n    })(this);\n  },\n  saveComplexInfo: function saveComplexInfo() {\n    console.log(\"save button clicked!\"); //manually save or update complex name to the database\n\n    var self = this;\n    var inputName = $(\"#inputComplexName\").val();\n    inputName = $fx.normalizeComplexName(inputName);\n    var inputName_original = self.complexOrSubdivision.text().trim();\n    inputName_original = $fx.normalizeComplexName(inputName_original);\n    inputName = inputName || inputName_original;\n\n    if (inputName.length > 0) {\n      this.addComplexInfo(inputName);\n      this.complexName.text(inputName + \"*\"); ////PUSH THE COMPLEX NAME INTO THE SPREADSHEET\n\n      if (self.spreadsheetTable == null) {\n        console.log(\"FR=> No Spreadsheet Table Found, Do not Save Complex.info\");\n        return;\n      }\n\n      var recordNo = parseInt(self.curPage.value);\n      var recordRows = $(self.spreadsheetTable).children().find(\"tr\");\n      var recordRow = $(recordRows[recordNo]);\n      var cells = recordRow.children();\n      var cols = $fx.setCols(self.tabTitle);\n      var complexCell = cells[cols.ComplexName];\n      var strataPlan = cells[cols.StrataPlan].textContent;\n      var streetAddress = cells[cols.StreetAddress].textContent;\n      var recordRow_i = null;\n      var strataPlan_i = \"\";\n      var streetAddress_i = \"\";\n      var cells_i = null;\n      var complexCell_i = null;\n\n      for (var i = 1; i < recordRows.length; i++) {\n        recordRow_i = $(recordRows[i]);\n        cells_i = recordRow_i.children();\n        complexCell_i = cells_i[cols.ComplexName];\n        strataPlan_i = cells_i[cols.StrataPlan].textContent;\n        streetAddress_i = cells_i[cols.StreetAddress].textContent;\n\n        if (strataPlan == strataPlan_i && streetAddress == streetAddress_i) {\n          complexCell_i.textContent = inputName;\n        }\n      }\n    }\n  },\n  saveExposureInfo: function saveExposureInfo() {\n    //console.log('save button clicked!');\n    //manually save or update complex name to the database\n    var self = this;\n    console.log(\"This is save exposure event\");\n    var inputName = $(\"#inputExposure\").val(); // inputName = $fx.normalizeComplexName(inputName);\n\n    if (inputName.length > 0) {\n      this.addExposureInfo(inputName);\n      this.exposure.text(inputName + \"*\");\n    }\n  },\n  saveListingInfo: function saveListingInfo() {\n    // save listing status\n    console.log(\"save Listing button clicked!\"); //manually save or update complex name to the database\n\n    var self = this;\n    var inputName = $(\"#inputListing\").val(); // inputName = $fx.normalizeComplexName(inputName);\n\n    if (inputName.length > 0) {\n      this.addListingInfo(inputName);\n    }\n  },\n  saveShowingInfo: function saveShowingInfo() {\n    console.log(\"save Showing button clicked!\"); //manually save or update complex name to the database\n\n    var self = this;\n    var inputName = $(\"#clientName\").val(); // inputName = $fx.normalizeComplexName(inputName);\n\n    if (inputName.length > 0) {\n      this.addShowingInfo(inputName);\n    }\n  },\n  showLargeMap: function showLargeMap() {\n    console.log(\"show large map clicked\");\n    var x = $(\"iframe#mapViewFrame\");\n    var y = x.contents();\n    var z = y.find(\"#divMap\");\n    var v = y.find(\"#jqMpCntlTopMenu\");\n    var w = y.find(\"div.jqMpCntlSubMenuImg.jqMpCntlSubMenuMpTypeAerial\");\n    w.click();\n    v.css(\"z-index\", 9999);\n\n    if (z.hasClass(\"mapBox__large\")) {\n      console.log(x);\n\n      if (!this.uiListingInfo.UIPics.children(\"#imgAnchor0\").children(\"#img0\").attr(\"src\")) {\n        this.addPics();\n      } // x.removeClass(\"mapbox__large\");\n\n\n      x.width(500);\n      x.height(810);\n      x.css(\"z-index\", 5000);\n      console.log(z);\n      z.removeClass(\"mapBox__large\");\n      z.width(498);\n      z.css(\"z-index\", 5000);\n      z.height(800);\n    } else {\n      console.log(x); // x.addClass(\"mapbox__large\");\n\n      x.width(1000);\n      x.height(820);\n      x.css(\"z-index\", 5000);\n      console.log(z);\n      z.addClass(\"mapBox__large\");\n      z.width(990);\n      z.css(\"z-index\", 5000);\n      z.height(810);\n      this.addPics();\n    }\n  },\n  updateAssess: function updateAssess() {\n    var self = this;\n    var listPrice = $fx.convertStringToDecimal(self.lp.text());\n    var soldPrice = $fx.convertStringToDecimal(self.sp.text());\n    chrome.storage.local.get([\"totalValue\", \"improvementValue\", \"landValue\", \"lotSize\", \"address\", \"bcaDataUpdateDate\", \"planNum\", \"dataFromDB\"], function (result) {\n      var totalValue = result.totalValue;\n      var formalAddress = result.address.trim();\n\n      if (!formalAddress) {\n        formalAddress = self.address.text().trim(); //TaxSearch has no address if presale listing\n      }\n\n      if (totalValue == 0) {\n        console.log(\"No BCA Assess Published Yet\"); //Update PlanNum and formal Address:\n\n        if (result.planNum) {\n          self.addStrataPlan(result.planNum); //self.uiListingInfo.planNo.text('Plan Num: ' + result.planNum + '*'); //Update the strataNum\n        }\n\n        self.formalAddress.text(\"\");\n        var adrLink = $('<a id=\"addressLink\" target=\"_blank\" href=\"https://www.google.com/search?q=Google+tutorial+create+link\">' + \"Google tutorial create link\" + \"</a> \");\n        var adrInfo = new _assets_scripts_modules_AddressInfo__WEBPACK_IMPORTED_MODULE_2__[\"default\"](formalAddress, \"auto\", true);\n        adrLink.attr(\"href\", adrInfo.googleSearchLink);\n        adrLink.text(adrInfo.formalAddress);\n        adrLink.appendTo(self.formalAddress);\n\n        if (formalAddress) {\n          self.addComplexInfo(); //Search Complex Name\n\n          self.addExposureInfo(); //Search Exposure Info\n\n          self.addListingInfo(); //Search Listing Info\n        }\n\n        return;\n      }\n\n      var improvementValue = result.improvementValue;\n      var landValue = result.landValue;\n      var lotSize = result.lotSize;\n      var lotArea = $fx.convertStringToDecimal(lotSize, true);\n      var lotAreaInSquareFeet = lotArea < 500 ? (lotArea * 43560).toFixed(0) : $fx.numberWithCommas($fx.removeDecimalFraction(lotArea));\n      var finishedFloorArea = $fx.convertStringToDecimal(self.finishedFloorArea.text());\n      var intTotalValue = $fx.convertStringToDecimal(totalValue);\n      var intImprovementValue = $fx.convertStringToDecimal(improvementValue);\n      var intLandValue = $fx.convertStringToDecimal(landValue);\n      var land2TotalRatio = (intLandValue / intTotalValue * 100).toFixed(1);\n      var house2TotalRatio = (intImprovementValue / intTotalValue * 100).toFixed(1);\n      var land2HouseRatio = (intLandValue / intImprovementValue).toFixed(1);\n      var landValuePerSF = \"\";\n      var houseValuePerSF = \"\";\n      var olderTimerLotValuePerSF = \"\";\n      var marketLotValuePerSF = \"\";\n      var marketHouseValuePerSF = \"\";\n      var marketValuePerSF = \"\";\n      var houseType = self.houseListingType;\n      var dataFromDB = result.dataFromDB; //Update PlanNum and formal Address:\n\n      if (result.planNum) {\n        self.addStrataPlan(result.planNum); //self.uiListingInfo.planNo.text('Plan Num: ' + result.planNum + '*'); //Update the strataNum\n      }\n\n      self.formalAddress.text(formalAddress);\n\n      if (formalAddress) {\n        self.addComplexInfo(); //Search Complex Name\n\n        self.addExposureInfo(); //Search Exposure Info\n\n        self.addListingInfo(); //Search Listing Info\n      } //console.log(\"mls-fullpublic got total bc assessment: \", landValue, improvementValue, totalValue, lotArea);\n\n\n      if (totalValue != 0) {\n        if (soldPrice > 0) {\n          var changeValue = soldPrice - intTotalValue;\n          var changeValuePercent = changeValue / intTotalValue * 100;\n          marketLotValuePerSF = (soldPrice * land2TotalRatio / 100 / lotAreaInSquareFeet).toFixed(0);\n          marketHouseValuePerSF = (soldPrice * house2TotalRatio / 100 / finishedFloorArea).toFixed(0);\n        } else {\n          var changeValue = listPrice - intTotalValue;\n          var changeValuePercent = changeValue / intTotalValue * 100;\n          marketLotValuePerSF = (listPrice * land2TotalRatio / 100 / lotAreaInSquareFeet).toFixed(0);\n          marketHouseValuePerSF = (listPrice * house2TotalRatio / 100 / finishedFloorArea).toFixed(0);\n        }\n      }\n\n      if (houseType == \"Detached\") {\n        var bcaLandValuePerSF = (intLandValue / lotAreaInSquareFeet).toFixed(0);\n        var bcaHouseValuePerSF = (intImprovementValue / finishedFloorArea).toFixed(0);\n        landValuePerSF = \"[ $\" + bcaLandValuePerSF.toString() + \"/sf ]\"; //console.log('landValue / lotArea', intLandValue, lotAreaInSquareFeet);\n\n        houseValuePerSF = \"[ $\" + bcaHouseValuePerSF.toString() + \"/sf ]\"; //console.log('houseValue / finishedArea', intImprovementValue, finishedFloorArea);\n\n        if (soldPrice > 0) {\n          var soldOldTimerPerSF = (soldPrice / lotAreaInSquareFeet).toFixed(0).toString();\n          olderTimerLotValuePerSF = \"OT Lot/SF sold$\" + soldOldTimerPerSF + \" /bca$\" + (intTotalValue / lotAreaInSquareFeet).toFixed(0).toString();\n        } else {\n          var listOldTimerPerSF = (listPrice / lotAreaInSquareFeet).toFixed(0).toString();\n          olderTimerLotValuePerSF = \"OT Lot/SF list$\" + listOldTimerPerSF + \" /bca$\" + (intTotalValue / lotAreaInSquareFeet).toFixed(0).toString();\n        }\n      }\n\n      self.bcAssess.text((dataFromDB ? \"total:  \" : \"total*:  \") + $fx.removeDecimalFraction(totalValue));\n      self.bcLand.text(\"land:  \" + $fx.removeDecimalFraction(landValue) + landValuePerSF);\n      self.bcImprovement.text(\"house:\" + $fx.removeDecimalFraction(improvementValue) + houseValuePerSF);\n      self.bcLand2ImprovementRatio.text(land2TotalRatio.toString() + \"%L-T \" + house2TotalRatio.toString() + \"%H-T \" + land2HouseRatio.toString() + \"L-H\");\n      self.valueChange.text(\"$\" + $fx.numberWithCommas(changeValue.toFixed(0)) + \" [ \" + changeValuePercent.toFixed(0).toString() + \"% ]   \");\n      self.oldTimerLotValuePerSF.text(olderTimerLotValuePerSF);\n      self.marketValuePerSF.text(\"Lot:$\" + marketLotValuePerSF.toString() + \"/SF\" + \" | Impv:$\" + marketHouseValuePerSF.toString() + \"/SF\");\n      self.lotArea.text($fx.numberWithCommas($fx.convertStringToDecimal(lotAreaInSquareFeet, true)));\n    });\n  },\n  clearAssess: function clearAssess() {\n    var self = this;\n    chrome.storage.local.set({\n      totalValue: \"\",\n      improvementValue: \"\",\n      landValue: \"\",\n      lotSize: \"\",\n      address: \"\",\n      bcaDataUpdateDate: \"\"\n    }, function () {//console.log(\"mls-fullpublic clear AssessInfo! \");\n    });\n  },\n  updateComplexListingQuan: function updateComplexListingQuan(changes) {\n    var self = this; //console.log(\"update strataPlanSummary:\");\n\n    chrome.storage.local.get(\"count\", function (result) {\n      var complexName = self.complexOrSubdivision.text().length > 0 ? self.complexOrSubdivision.text() : \"Complex\";\n      var summary = \": [ \" + result.count + \" ]\";\n      self.complexName.text(complexName);\n      self.complexListingSummary.text(summary);\n    });\n  },\n  updateExposureInfo: function updateExposureInfo() {\n    var self = this;\n    var $inputName = $(\"#inputExposure\");\n    var exposureName = \"\";\n    chrome.storage.local.get(\"exposureName\", function (result) {\n      exposureName = result.exposureName;\n      self.exposure.text(exposureName);\n      $inputName.val(exposureName + \"::\");\n    });\n  },\n  updateListingInfo: function updateListingInfo() {\n    var self = this;\n    var $inputName = $(\"#inputListing\");\n    var listingName = \"\";\n    chrome.storage.local.get(\"listingName\", function (result) {\n      listingName = result.listingName;\n      $inputName.val(listingName + \"::\");\n      $inputName.focus();\n      $inputName.select();\n      navigator.clipboard.writeText(listingName).then(function () {\n        console.log(\"Copy Listing Status Done!\");\n        $inputName.blur();\n        $inputName.css(\"background-color\", \"lightgreen\");\n      }, function (err) {\n        console.log(\"Copy ListingName Failed\", err);\n        $inputName.blur();\n        $inputName.css(\"background-color\", \"lightgrey\");\n      });\n    });\n  },\n  //update showing fields:\n  updateShowingInfo: function updateShowingInfo() {\n    var self = this;\n    var $clientName = $(\"#clientName\");\n    var $showingNote = $(\"#showingNote\");\n    var $showingDate = $(\"#showingDate\");\n    var $showingTime = $(\"#showingTime\");\n    chrome.storage.local.get([\"clientName\", \"name\", \"showingDate\", \"showingTime\", \"showingNote\"], function (result) {\n      $clientName.val(result.name + \"::\");\n      $showingNote.val(result.showingNote);\n      $showingDate.val(result.showingDate);\n      $showingTime.val(result.showingTime);\n    });\n  }\n}; //star the app\n\n$(function () {\n  fullRealtor.init();\n});\n\n//# sourceURL=webpack:///./app/content/mls-FullRealtor.js?");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/classCallCheck.js":
/***/ (function(module, exports) {

eval("function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n\n//# sourceURL=webpack:///./node_modules/@babel/runtime/helpers/classCallCheck.js?");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/createClass.js":
/***/ (function(module, exports) {

eval("function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n\n//# sourceURL=webpack:///./node_modules/@babel/runtime/helpers/createClass.js?");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/defineProperty.js":
/***/ (function(module, exports) {

eval("function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n\n//# sourceURL=webpack:///./node_modules/@babel/runtime/helpers/defineProperty.js?");

/***/ })

/******/ });